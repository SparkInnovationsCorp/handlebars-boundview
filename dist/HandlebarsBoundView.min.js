class HandlebarsBoundView { constructor(e = "#app", t = null) { this.target = e, this.templatePath = t || this.constructor.name + ".html", this.template = null, this.register() } register() { this.onclickHandles = [], this.bindHandles = []; const e = this; this.valid() && ("undefined" != typeof Handlebars ? (Handlebars.registerHelper("eq", (function (e, t) { return e === t })), Handlebars.registerHelper("neq", (function (e, t) { return e !== t })), Handlebars.registerHelper("gt", (function (e, t) { return e > t })), Handlebars.registerHelper("lt", (function (e, t) { return e < t })), Handlebars.registerHelper("click", (function (t, n) { return "function" == typeof e[t] ? (e.onclickHandles.push({ fn: e[t].bind(e), redraw: "boolean" != typeof n || n, data: this }), `data-onclickhandler='${e.onclickHandles.length - 1}'`) : (console.error(`Error: Method ${t} does not exist on the class.`), "") })), Handlebars.registerHelper("bind", (function (t) { return e.bindHandles.push({ prop: t, data: this }), `data-bind='${e.bindHandles.length - 1}'` })), Handlebars.registerHelper("call", (function (t) { return "function" == typeof e[t] ? e[t].bind(e)(this) : (console.error(`Error: Method ${t} does not exist on the class.`), "") })), Handlebars.registerHelper("nullOrEmpty", (function (e) { return null == e || "" === e }))) : console.error("Handlebars.js is not installed. Please make sure to include it in your project.")) } loadTemplate(e) { this.template ? e() : fetch(this.templatePath).then((e => { if (!e.ok) throw new Error(`HTTP error! status: ${e.status}`); return e.text() })).then((t => { this.template = Handlebars.compile(t), e() })).catch((e => { console.error("Error: Could not load template " + this.templatePath + " " + e.message) })) } render() { this.onclickHandles = [], this.bindHandles = [], this.valid() && this.loadTemplate((() => { const e = this.template(this), t = document.querySelector(this.target); t ? t.innerHTML = e : console.error(`The target "${this.target}" could not be found.`), this.bindProps(), this.bindEvents() })) } bindEvents() { const e = this; document.querySelectorAll("[data-onclickhandler]").forEach((t => { const n = parseInt(t.getAttribute("data-onclickhandler"), 10), r = e.onclickHandles[n]; t.addEventListener("click", (function () { if (r.redraw) { const t = e.serialize(); r.fn(r.data); t !== e.serialize() && e.render() } else r.fn(r.data) })) })) } bindProps() { const e = this; document.querySelectorAll("[data-bind]").forEach((t => { const n = parseInt(t.getAttribute("data-bind"), 10), r = e.bindHandles[n]; var s = r.prop, a = null; if (s.startsWith("base.") ? (a = e, s = r.prop.substring(5)) : s.startsWith("this.") ? (a = r.data, s = r.prop.substring(5)) : a = r.data, s.includes(".") || s.includes("[")) { const { targetObject: e, finalProp: t } = this.resolveNested(a, s); a = e, s = t } "INPUT" === t.tagName || "SELECT" === t.tagName || "TEXTAREA" === t.tagName ? t.value = a[s] : t.textContent = a[s], t.addEventListener("change", (function () { a[s] = t.value, e.render() })) })) } resolveNested(e, t) { const n = t.replace(/\[(\w+)\]/g, ".$1").split("."); let r = e; for (let e = 0; e < n.length - 1; e++) { const t = n[e]; if (!(t in r)) throw new Error(`Property ${t} not found`); r = r[t] } return { targetObject: r, finalProp: n[n.length - 1] } } serialize() { return JSON.stringify(this, (function (e, t) { if (!(["onclickHandles", "bindHandles", "target", "template", "templatePath"].indexOf(e) > -1)) return t })) } valid() { return "undefined" != typeof Handlebars || (console.error("Handlebars.js is not installed. Please make sure to include it in your project."), !1) } }